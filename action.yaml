name: "github-actions-releaser"
description: "Release GitHub actions versions, including rolling major versions."
branding:
  color: "green"
  icon: "book-open"
inputs:
  PROJECT_NAME:
    description: "The name of the project to be released"
    required: true
  GITHUB_TOKEN:
    description: "The file that the output report will be written to"
    required: true
  RELEASE_BRANCH:
    description: "The branch to release from"
    required: true
    default: "main"
outputs:
  NEW_RELEASE:
    description: "The new release version"
    value: ${{ steps.release.outputs.NEW_RELEASE }}
  NEW_MAJOR_RELEASE:
    description: "The new major release version"
    value: ${{ steps.release.outputs.NEW_MAJOR_RELEASE }}
runs:
  using: "composite"
  steps:
  # Checkout repo
  - name: Checkout
    uses: actions/checkout@v4
  - name: Write release config
    shell: bash
    env:
      PROJECT_NAME: ${{ inputs.PROJECT_NAME }}
      RELEASE_BRANCH: ${{ inputs.RELEASE_BRANCH }}
    run: |
      # Create temporary release directory
      mkdir "${GITHUB_SHA}"
      
      # Copy the package.json file from the action to the current directory
      cp ${{ github.action_path}}/docs/package.json "${GITHUB_SHA}"/package.json
      
      # Update the package.json file with the project name
      sed -i "s/PROJECT_NAME/${PROJECT_NAME}/g" "${GITHUB_SHA}"/package.json
      
      echo -e '{
        "name": "'${PROJECT_NAME}'",
        "branches": ["'${RELEASE_BRANCH}'"]
      }' >> "${GITHUB_SHA}"/.releaserc

  - name: Setup Node.js
    uses: actions/setup-node@v4
    with:
      node-version: 'lts/*'
  - name: Install dependencies
    shell: bash
    run: |
      cd "${GITHUB_SHA}"
      npm install

  - name: Release
    shell: bash
    id: release
    env:
      GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
      GH_TOKEN: ${{ inputs.GITHUB_TOKEN }}
    run: |
      cd "${GITHUB_SHA}"
      npx semantic-release

      # Get new release version
      new_release=$(gh release list --limit 1 --json tagName | jq -r '.[0].tagName')
      new_major_release=$(echo $new_release | cut -d. -f1)

      ## Release major version
      # Delete major version if it exists (don't fail if it doesn't)
      git push origin --delete $new_major_release || true
      gh release delete $new_major_release || true

      # Create major version
      git tag -f $new_major_release
      git push origin --tags

      # Recreate release
      gh release create $new_major_release --generate-notes

      echo "New release version: $new_release"
      echo "New major release version: $new_major_release"

      # Create outputs
      echo "NEW_RELEASE=$new_release" >> $GITHUB_OUTPUT
      echo "NEW_MAJOR_RELEASE=$new_major_release" >> $GITHUB_OUTPUT